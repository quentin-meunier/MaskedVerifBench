(* File TI-Add.mv *)
(*                                                                                       *)
(* Copyright (C) 2021, Sorbonne Universite, LIP6                                         *)
(* This file is part of the MaskedVerifBench project, under the GPL v3.0 license         *)
(* See https://www.gnu.org/licenses/gpl-3.0.en.html for license information              *)
(* SPDX-License-Identifier: GPL-3.0-only                                                 *)
(* Author(s): Etienne Pons                                                               *)

proc MAIN:
	inputs: w32 x[0:1], w32 y[0:1]
	outputs: w32 regz[0], w32 regu[0], w32 regd[0], w32 regt[0], w32 regq[0], w32 regc[0], w32 regsi[0], w32 regse[0], w32 regh[0], w32 regn[0], w32 reguz[0], w32 reguu[0], w32 regud[0]
	randoms: w32 r;

	regz0 = { x0 };
	regu0 = { x1 };
	regd0 = { y0 };
	regt0 = { y1 };

	regud0 = { (0x00000001:w32) &w32 r };
	regq0 = { ~w32(~w32(regud0) &w32 ~w32(regz0 >> 1)) };
	regud0 = { regz0 << 31 };
	regc0 = { regz0 &w32 regd0 };
	regsi0 = { regz0 &w32 regt0 };
	regz0 = { regz0 ^w32 regd0 };
	regc0 = { regc0 ^w32 regq0 };
	regsi0 = { regsi0 ^w32 regq0 };
	regn0 = { regu0 &w32 regd0 };
	regh0 = { regu0 &w32 regt0 };
	regu0 = { regu0 ^w32 regt0 };
	regc0 = { regc0 ^w32 regh0 };
	regsi0 = { regsi0 ^w32 regn0 };
	regq0 = { ~w32(~w32(regud0) &w32 ~w32(regz0 >> 1)) };
	regud0 = { regz0 << 31 };
	regse0 = { regz0 &w32 (regc0 << 1) };
	regh0 = { regu0 &w32 (regc0 << 1) };
	reguz0 = { regz0 &w32 (regsi0 << 1) };
	reguu0 = { regu0 &w32 (regsi0 << 1) };
	regsi0 = { regsi0 ^w32 reguu0 };
	regsi0 = { regsi0 ^w32 reguz0 };
	regc0 = { regse0 ^w32 regc0 };
	regc0 = { regh0 ^w32 regc0 };
	regd0 = { regz0 &w32 (regz0 << 1) };
	regt0 = { regu0 &w32 (regz0 << 1) };
	reguz0 = { regz0 &w32 (regu0 << 1) };
	reguu0 = { regu0 &w32 (regu0 << 1) };
	regh0 = { reguu0 ^w32 regq0 };
	regh0 = { reguz0 ^w32 regh0 };
	regse0 = { regt0 ^w32 regq0 };
	regse0 = { regse0 ^w32 regd0 };
	regq0 = { ~w32(~w32(regud0) &w32 ~w32(regse0 >> 1)) };
	regud0 = { regse0 << 31 };
	regd0 = { regse0 &w32 (regc0 << 2) };
	regt0 = { regh0 &w32 (regc0 << 2) };
	reguz0 = { regse0 &w32 (regsi0 << 2) };
	reguu0 = { regh0 &w32 (regsi0 << 2) };
	regsi0 = { regsi0 ^w32 reguu0 };
	regsi0 = { regsi0 ^w32 reguz0 };
	regc0 = { regd0 ^w32 regc0 };
	regc0 = { regt0 ^w32 regc0 };
	regd0 = { regse0 &w32 (regse0 << 2) };
	regt0 = { regh0 &w32 (regse0 << 2) };
	reguz0 = { regse0 &w32 (regh0 << 2) };
	reguu0 = { regh0 &w32 (regh0 << 2) };
	regh0 = { reguu0 ^w32 regq0 };
	regh0 = { reguz0 ^w32 regh0 };
	regse0 = { regt0 ^w32 regq0 };
	regse0 = { regse0 ^w32 regd0 };
	regq0 = { ~w32(~w32(regud0) &w32 ~w32(regse0 >> 1)) };
	regud0 = { regse0 << 31 };
	regd0 = { regse0 &w32 (regc0 << 4) };
	regt0 = { regse0 &w32 (regsi0 << 4) };
	regn0 = { regh0 &w32 (regc0 << 4) };
	reguz0 = { regh0 &w32 (regsi0 << 4) };
	regc0 = { regc0 ^w32 regd0 };
	regsi0 = { regsi0 ^w32 regt0 };
	regc0 = { regc0 ^w32 regn0 };
	regsi0 = { regsi0 ^w32 reguz0 };
	regd0 = { regse0 &w32 (regse0 << 4) };
	regt0 = { regse0 &w32 (regh0 << 4) };
	regn0 = { regh0 &w32 (regse0 << 4) };
	reguz0 = { regh0 &w32 (regh0 << 4) };
	regse0 = { regd0 ^w32 regq0 };
	regh0 = { regt0 ^w32 regq0 };
	regse0 = { regse0 ^w32 reguz0 };
	regh0 = { regh0 ^w32 regn0 };
	regq0 = { regud0 ^w32 (regse0 >> 1) };
	regud0 = { regse0 << 31 };
	regd0 = { regse0 &w32 (regc0 << 8) };
	regt0 = { regse0 &w32 (regsi0 << 8) };
	regn0 = { regh0 &w32 (regc0 << 8) };
	reguz0 = { regh0 &w32 (regsi0 << 8) };
	regc0 = { regc0 ^w32 regd0 };
	regsi0 = { regsi0 ^w32 regt0 };
	regc0 = { regc0 ^w32 regn0 };
	regsi0 = { regsi0 ^w32 reguz0 };
	regd0 = { regse0 &w32 (regse0 << 8) };
	regt0 = { regse0 &w32 (regh0 << 8) };
	regn0 = { regh0 &w32 (regse0 << 8) };
	reguz0 = { regh0 &w32 (regh0 << 8) };
	regse0 = { regd0 ^w32 regq0 };
	regh0 = { regt0 ^w32 regq0 };
	regse0 = { regse0 ^w32 reguz0 };
	regh0 = { regh0 ^w32 regn0 };
	regd0 = { regse0 &w32 (regc0 << 16) };
	regt0 = { regse0 &w32 (regsi0 << 16) };
	regn0 = { regh0 &w32 (regc0 << 16) };
	reguz0 = { regh0 &w32 (regsi0 << 16) };
	regc0 = { regc0 ^w32 regd0 };
	regsi0 = { regsi0 ^w32 regt0 };
	regc0 = { regc0 ^w32 regn0 };
	regsi0 = { regsi0 ^w32 reguz0 };
	regz0 = { regz0 ^w32 (regc0 << 1) };
	regu0 = { regu0 ^w32 (regsi0 << 1) };
end

verbose 0
Probing MAIN
