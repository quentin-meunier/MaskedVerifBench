(* File AES-SM.ec *)
(*                                                                                       *)
(* Copyright (C) 2021, Sorbonne Universite, LIP6                                         *)
(* This file is part of the MaskedVerifBench project, under the GPL v3.0 license         *)
(* See https://www.gnu.org/licenses/gpl-3.0.en.html for license information              *)
(* SPDX-License-Identifier: GPL-3.0-only                                                 *)
(* Author(s): Etienne Pons                                                               *)

import require Byte

op Ox01: byte.
op Ox02: byte.
op Ox04: byte.
op Ox08: byte.
op Ox10: byte.
op Ox20: byte.
op Ox40: byte.
op Ox80: byte.
op Ox1b: byte.
op Ox36: byte.
op Ox03: byte.

module M = {
  proc main(plain_text_0 plain_text_1 plain_text_2 plain_text_3 plain_text_4 plain_text_5 plain_text_6 plain_text_7 plain_text_8 plain_text_9 plain_text_10 plain_text_11 plain_text_12 plain_text_13 plain_text_14 plain_text_15 key_0 key_1 key_2 key_3 key_4 key_5 key_6 key_7 key_8 key_9 key_10 key_11 key_12 key_13 key_14 key_15:byte):byte = {
    var ciphered_text_0, ciphered_text_1, ciphered_text_2, ciphered_text_3, ciphered_text_4, ciphered_text_5, ciphered_text_6, ciphered_text_7, ciphered_text_8, ciphered_text_9, ciphered_text_10, ciphered_text_11, ciphered_text_12, ciphered_text_13, ciphered_text_14, ciphered_text_15;

    var round_key_0, round_key_1, round_key_2, round_key_3, round_key_4, round_key_5, round_key_6, round_key_7, round_key_8, round_key_9, round_key_10, round_key_11, round_key_12, round_key_13, round_key_14, round_key_15, round_key_16, round_key_17, round_key_18, round_key_19, round_key_20, round_key_21, round_key_22, round_key_23, round_key_24, round_key_25, round_key_26, round_key_27, round_key_28, round_key_29, round_key_30, round_key_31, round_key_32, round_key_33, round_key_34, round_key_35, round_key_36, round_key_37, round_key_38, round_key_39, round_key_40, round_key_41, round_key_42, round_key_43, round_key_44, round_key_45, round_key_46, round_key_47, round_key_48, round_key_49, round_key_50, round_key_51, round_key_52, round_key_53, round_key_54, round_key_55, round_key_56, round_key_57, round_key_58, round_key_59, round_key_60, round_key_61, round_key_62, round_key_63, round_key_64, round_key_65, round_key_66, round_key_67, round_key_68, round_key_69, round_key_70, round_key_71, round_key_72, round_key_73, round_key_74, round_key_75, round_key_76, round_key_77, round_key_78, round_key_79, round_key_80, round_key_81, round_key_82, round_key_83, round_key_84, round_key_85, round_key_86, round_key_87, round_key_88, round_key_89, round_key_90, round_key_91, round_key_92, round_key_93, round_key_94, round_key_95, round_key_96, round_key_97, round_key_98, round_key_99, round_key_100, round_key_101, round_key_102, round_key_103, round_key_104, round_key_105, round_key_106, round_key_107, round_key_108, round_key_109, round_key_110, round_key_111, round_key_112, round_key_113, round_key_114, round_key_115, round_key_116, round_key_117, round_key_118, round_key_119, round_key_120, round_key_121, round_key_122, round_key_123, round_key_124, round_key_125, round_key_126, round_key_127, round_key_128, round_key_129, round_key_130, round_key_131, round_key_132, round_key_133, round_key_134, round_key_135, round_key_136, round_key_137, round_key_138, round_key_139, round_key_140, round_key_141, round_key_142, round_key_143, round_key_144, round_key_145, round_key_146, round_key_147, round_key_148, round_key_149, round_key_150, round_key_151, round_key_152, round_key_153, round_key_154, round_key_155, round_key_156, round_key_157, round_key_158, round_key_159, round_key_160, round_key_161, round_key_162, round_key_163, round_key_164, round_key_165, round_key_166, round_key_167, round_key_168, round_key_169, round_key_170, round_key_171, round_key_172, round_key_173, round_key_174, round_key_175;
    var x_0_0, x_0_1, x_0_2, x_0_3, x_1_0, x_1_1, x_1_2, x_1_3, x_2_0, x_2_1, x_2_2, x_2_3, x_3_0, x_3_1, x_3_2, x_3_3;
    var mt_0, mt_1, mt_2, mt_3;
    var mpt_0, mpt_1, mpt_2, mpt_3;
    var m, mp;
    mt_0 = $distr;
    mt_1 = $distr;
    mt_2 = $distr;
    mt_3 = $distr;
    m = $distr;
    mp = $distr;
    mpt_0 = mt_0;
    mpt_1 = mt_1;
    mpt_2 = mt_2;
    mpt_3 = mt_3;

    (* Mix column for variable mpt *)
    var tmp_mix_0, tmp_mix_1, tmp_mix_2, tmp_mix_3;
    var double, triple;
    tmp_mix_0 = mpt_0;
    tmp_mix_1 = mpt_1;
    tmp_mix_2 = mpt_2;
    tmp_mix_3 = mpt_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    mpt_0 = double ^ tmp_mix_3;
    mpt_0 = mpt_0 ^ tmp_mix_2;
    mpt_0 = mpt_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    mpt_1 = double ^ tmp_mix_0;
    mpt_1 = mpt_1 ^ tmp_mix_3;
    mpt_1 = mpt_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    mpt_2 = double ^ tmp_mix_1;
    mpt_2 = mpt_2 ^ tmp_mix_0;
    mpt_2 = mpt_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    mpt_3 = double ^ tmp_mix_2;
    mpt_3 = mpt_3 ^ tmp_mix_1;
    mpt_3 = mpt_3 ^ triple;

    (* ##################################### *)
    (*         Masked key generation         *)
    (* ##################################### *)

    round_key_0 = key_0 ^ mpt_0 ^ m;
    round_key_1 = key_1 ^ mpt_1 ^ m;
    round_key_2 = key_2 ^ mpt_2 ^ m;
    round_key_3 = key_3 ^ mpt_3 ^ m;
    round_key_4 = key_4 ^ mpt_0 ^ m;
    round_key_5 = key_5 ^ mpt_1 ^ m;
    round_key_6 = key_6 ^ mpt_2 ^ m;
    round_key_7 = key_7 ^ mpt_3 ^ m;
    round_key_8 = key_8 ^ mpt_0 ^ m;
    round_key_9 = key_9 ^ mpt_1 ^ m;
    round_key_10 = key_10 ^ mpt_2 ^ m;
    round_key_11 = key_11 ^ mpt_3 ^ m;
    round_key_12 = key_12 ^ mpt_0 ^ m;
    round_key_13 = key_13 ^ mpt_1 ^ m;
    round_key_14 = key_14 ^ mpt_2 ^ m;
    round_key_15 = key_15 ^ mpt_3 ^ m;


    (* Generating the keys for rounds 1 to 9 *)
    (* 1 word per iteration *)
    (* All keys are masked with M and (M1', M2', M3', M4') *)

    var tmp_init_0, tmp_init_1, tmp_init_2, tmp_init_3, k;
    tmp_init_0 = round_key_12;
    tmp_init_1 = round_key_13;
    tmp_init_2 = round_key_14;
    tmp_init_3 = round_key_15;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox01;
    round_key_16 = round_key_0 ^ tmp_init_0;
    round_key_16 = round_key_16 ^ mp;
    round_key_17 = round_key_1 ^ tmp_init_1;
    round_key_17 = round_key_17 ^ mp;
    round_key_18 = round_key_2 ^ tmp_init_2;
    round_key_18 = round_key_18 ^ mp;
    round_key_19 = round_key_3 ^ tmp_init_3;
    round_key_19 = round_key_19 ^ mp;

    tmp_init_0 = round_key_16;
    tmp_init_1 = round_key_17;
    tmp_init_2 = round_key_18;
    tmp_init_3 = round_key_19;
    round_key_20 = round_key_4 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_20 = round_key_20 ^ tmp_init_0;
    round_key_21 = round_key_5 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_21 = round_key_21 ^ tmp_init_1;
    round_key_22 = round_key_6 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_22 = round_key_22 ^ tmp_init_2;
    round_key_23 = round_key_7 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_23 = round_key_23 ^ tmp_init_3;

    tmp_init_0 = round_key_20;
    tmp_init_1 = round_key_21;
    tmp_init_2 = round_key_22;
    tmp_init_3 = round_key_23;
    round_key_24 = round_key_8 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_24 = round_key_24 ^ tmp_init_0;
    round_key_25 = round_key_9 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_25 = round_key_25 ^ tmp_init_1;
    round_key_26 = round_key_10 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_26 = round_key_26 ^ tmp_init_2;
    round_key_27 = round_key_11 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_27 = round_key_27 ^ tmp_init_3;

    tmp_init_0 = round_key_24;
    tmp_init_1 = round_key_25;
    tmp_init_2 = round_key_26;
    tmp_init_3 = round_key_27;
    round_key_28 = round_key_12 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_28 = round_key_28 ^ tmp_init_0;
    round_key_29 = round_key_13 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_29 = round_key_29 ^ tmp_init_1;
    round_key_30 = round_key_14 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_30 = round_key_30 ^ tmp_init_2;
    round_key_31 = round_key_15 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_31 = round_key_31 ^ tmp_init_3;

    tmp_init_0 = round_key_28;
    tmp_init_1 = round_key_29;
    tmp_init_2 = round_key_30;
    tmp_init_3 = round_key_31;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox02;
    round_key_32 = round_key_16 ^ tmp_init_0;
    round_key_32 = round_key_32 ^ mp;
    round_key_33 = round_key_17 ^ tmp_init_1;
    round_key_33 = round_key_33 ^ mp;
    round_key_34 = round_key_18 ^ tmp_init_2;
    round_key_34 = round_key_34 ^ mp;
    round_key_35 = round_key_19 ^ tmp_init_3;
    round_key_35 = round_key_35 ^ mp;

    tmp_init_0 = round_key_32;
    tmp_init_1 = round_key_33;
    tmp_init_2 = round_key_34;
    tmp_init_3 = round_key_35;
    round_key_36 = round_key_20 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_36 = round_key_36 ^ tmp_init_0;
    round_key_37 = round_key_21 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_37 = round_key_37 ^ tmp_init_1;
    round_key_38 = round_key_22 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_38 = round_key_38 ^ tmp_init_2;
    round_key_39 = round_key_23 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_39 = round_key_39 ^ tmp_init_3;

    tmp_init_0 = round_key_36;
    tmp_init_1 = round_key_37;
    tmp_init_2 = round_key_38;
    tmp_init_3 = round_key_39;
    round_key_40 = round_key_24 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_40 = round_key_40 ^ tmp_init_0;
    round_key_41 = round_key_25 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_41 = round_key_41 ^ tmp_init_1;
    round_key_42 = round_key_26 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_42 = round_key_42 ^ tmp_init_2;
    round_key_43 = round_key_27 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_43 = round_key_43 ^ tmp_init_3;

    tmp_init_0 = round_key_40;
    tmp_init_1 = round_key_41;
    tmp_init_2 = round_key_42;
    tmp_init_3 = round_key_43;
    round_key_44 = round_key_28 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_44 = round_key_44 ^ tmp_init_0;
    round_key_45 = round_key_29 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_45 = round_key_45 ^ tmp_init_1;
    round_key_46 = round_key_30 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_46 = round_key_46 ^ tmp_init_2;
    round_key_47 = round_key_31 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_47 = round_key_47 ^ tmp_init_3;

    tmp_init_0 = round_key_44;
    tmp_init_1 = round_key_45;
    tmp_init_2 = round_key_46;
    tmp_init_3 = round_key_47;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox04;
    round_key_48 = round_key_32 ^ tmp_init_0;
    round_key_48 = round_key_48 ^ mp;
    round_key_49 = round_key_33 ^ tmp_init_1;
    round_key_49 = round_key_49 ^ mp;
    round_key_50 = round_key_34 ^ tmp_init_2;
    round_key_50 = round_key_50 ^ mp;
    round_key_51 = round_key_35 ^ tmp_init_3;
    round_key_51 = round_key_51 ^ mp;

    tmp_init_0 = round_key_48;
    tmp_init_1 = round_key_49;
    tmp_init_2 = round_key_50;
    tmp_init_3 = round_key_51;
    round_key_52 = round_key_36 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_52 = round_key_52 ^ tmp_init_0;
    round_key_53 = round_key_37 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_53 = round_key_53 ^ tmp_init_1;
    round_key_54 = round_key_38 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_54 = round_key_54 ^ tmp_init_2;
    round_key_55 = round_key_39 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_55 = round_key_55 ^ tmp_init_3;

    tmp_init_0 = round_key_52;
    tmp_init_1 = round_key_53;
    tmp_init_2 = round_key_54;
    tmp_init_3 = round_key_55;
    round_key_56 = round_key_40 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_56 = round_key_56 ^ tmp_init_0;
    round_key_57 = round_key_41 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_57 = round_key_57 ^ tmp_init_1;
    round_key_58 = round_key_42 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_58 = round_key_58 ^ tmp_init_2;
    round_key_59 = round_key_43 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_59 = round_key_59 ^ tmp_init_3;

    tmp_init_0 = round_key_56;
    tmp_init_1 = round_key_57;
    tmp_init_2 = round_key_58;
    tmp_init_3 = round_key_59;
    round_key_60 = round_key_44 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_60 = round_key_60 ^ tmp_init_0;
    round_key_61 = round_key_45 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_61 = round_key_61 ^ tmp_init_1;
    round_key_62 = round_key_46 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_62 = round_key_62 ^ tmp_init_2;
    round_key_63 = round_key_47 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_63 = round_key_63 ^ tmp_init_3;

    tmp_init_0 = round_key_60;
    tmp_init_1 = round_key_61;
    tmp_init_2 = round_key_62;
    tmp_init_3 = round_key_63;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox08;
    round_key_64 = round_key_48 ^ tmp_init_0;
    round_key_64 = round_key_64 ^ mp;
    round_key_65 = round_key_49 ^ tmp_init_1;
    round_key_65 = round_key_65 ^ mp;
    round_key_66 = round_key_50 ^ tmp_init_2;
    round_key_66 = round_key_66 ^ mp;
    round_key_67 = round_key_51 ^ tmp_init_3;
    round_key_67 = round_key_67 ^ mp;

    tmp_init_0 = round_key_64;
    tmp_init_1 = round_key_65;
    tmp_init_2 = round_key_66;
    tmp_init_3 = round_key_67;
    round_key_68 = round_key_52 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_68 = round_key_68 ^ tmp_init_0;
    round_key_69 = round_key_53 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_69 = round_key_69 ^ tmp_init_1;
    round_key_70 = round_key_54 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_70 = round_key_70 ^ tmp_init_2;
    round_key_71 = round_key_55 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_71 = round_key_71 ^ tmp_init_3;

    tmp_init_0 = round_key_68;
    tmp_init_1 = round_key_69;
    tmp_init_2 = round_key_70;
    tmp_init_3 = round_key_71;
    round_key_72 = round_key_56 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_72 = round_key_72 ^ tmp_init_0;
    round_key_73 = round_key_57 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_73 = round_key_73 ^ tmp_init_1;
    round_key_74 = round_key_58 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_74 = round_key_74 ^ tmp_init_2;
    round_key_75 = round_key_59 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_75 = round_key_75 ^ tmp_init_3;

    tmp_init_0 = round_key_72;
    tmp_init_1 = round_key_73;
    tmp_init_2 = round_key_74;
    tmp_init_3 = round_key_75;
    round_key_76 = round_key_60 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_76 = round_key_76 ^ tmp_init_0;
    round_key_77 = round_key_61 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_77 = round_key_77 ^ tmp_init_1;
    round_key_78 = round_key_62 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_78 = round_key_78 ^ tmp_init_2;
    round_key_79 = round_key_63 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_79 = round_key_79 ^ tmp_init_3;

    tmp_init_0 = round_key_76;
    tmp_init_1 = round_key_77;
    tmp_init_2 = round_key_78;
    tmp_init_3 = round_key_79;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox10;
    round_key_80 = round_key_64 ^ tmp_init_0;
    round_key_80 = round_key_80 ^ mp;
    round_key_81 = round_key_65 ^ tmp_init_1;
    round_key_81 = round_key_81 ^ mp;
    round_key_82 = round_key_66 ^ tmp_init_2;
    round_key_82 = round_key_82 ^ mp;
    round_key_83 = round_key_67 ^ tmp_init_3;
    round_key_83 = round_key_83 ^ mp;

    tmp_init_0 = round_key_80;
    tmp_init_1 = round_key_81;
    tmp_init_2 = round_key_82;
    tmp_init_3 = round_key_83;
    round_key_84 = round_key_68 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_84 = round_key_84 ^ tmp_init_0;
    round_key_85 = round_key_69 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_85 = round_key_85 ^ tmp_init_1;
    round_key_86 = round_key_70 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_86 = round_key_86 ^ tmp_init_2;
    round_key_87 = round_key_71 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_87 = round_key_87 ^ tmp_init_3;

    tmp_init_0 = round_key_84;
    tmp_init_1 = round_key_85;
    tmp_init_2 = round_key_86;
    tmp_init_3 = round_key_87;
    round_key_88 = round_key_72 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_88 = round_key_88 ^ tmp_init_0;
    round_key_89 = round_key_73 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_89 = round_key_89 ^ tmp_init_1;
    round_key_90 = round_key_74 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_90 = round_key_90 ^ tmp_init_2;
    round_key_91 = round_key_75 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_91 = round_key_91 ^ tmp_init_3;

    tmp_init_0 = round_key_88;
    tmp_init_1 = round_key_89;
    tmp_init_2 = round_key_90;
    tmp_init_3 = round_key_91;
    round_key_92 = round_key_76 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_92 = round_key_92 ^ tmp_init_0;
    round_key_93 = round_key_77 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_93 = round_key_93 ^ tmp_init_1;
    round_key_94 = round_key_78 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_94 = round_key_94 ^ tmp_init_2;
    round_key_95 = round_key_79 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_95 = round_key_95 ^ tmp_init_3;

    tmp_init_0 = round_key_92;
    tmp_init_1 = round_key_93;
    tmp_init_2 = round_key_94;
    tmp_init_3 = round_key_95;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox20;
    round_key_96 = round_key_80 ^ tmp_init_0;
    round_key_96 = round_key_96 ^ mp;
    round_key_97 = round_key_81 ^ tmp_init_1;
    round_key_97 = round_key_97 ^ mp;
    round_key_98 = round_key_82 ^ tmp_init_2;
    round_key_98 = round_key_98 ^ mp;
    round_key_99 = round_key_83 ^ tmp_init_3;
    round_key_99 = round_key_99 ^ mp;

    tmp_init_0 = round_key_96;
    tmp_init_1 = round_key_97;
    tmp_init_2 = round_key_98;
    tmp_init_3 = round_key_99;
    round_key_100 = round_key_84 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_100 = round_key_100 ^ tmp_init_0;
    round_key_101 = round_key_85 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_101 = round_key_101 ^ tmp_init_1;
    round_key_102 = round_key_86 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_102 = round_key_102 ^ tmp_init_2;
    round_key_103 = round_key_87 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_103 = round_key_103 ^ tmp_init_3;

    tmp_init_0 = round_key_100;
    tmp_init_1 = round_key_101;
    tmp_init_2 = round_key_102;
    tmp_init_3 = round_key_103;
    round_key_104 = round_key_88 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_104 = round_key_104 ^ tmp_init_0;
    round_key_105 = round_key_89 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_105 = round_key_105 ^ tmp_init_1;
    round_key_106 = round_key_90 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_106 = round_key_106 ^ tmp_init_2;
    round_key_107 = round_key_91 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_107 = round_key_107 ^ tmp_init_3;

    tmp_init_0 = round_key_104;
    tmp_init_1 = round_key_105;
    tmp_init_2 = round_key_106;
    tmp_init_3 = round_key_107;
    round_key_108 = round_key_92 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_108 = round_key_108 ^ tmp_init_0;
    round_key_109 = round_key_93 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_109 = round_key_109 ^ tmp_init_1;
    round_key_110 = round_key_94 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_110 = round_key_110 ^ tmp_init_2;
    round_key_111 = round_key_95 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_111 = round_key_111 ^ tmp_init_3;

    tmp_init_0 = round_key_108;
    tmp_init_1 = round_key_109;
    tmp_init_2 = round_key_110;
    tmp_init_3 = round_key_111;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox40;
    round_key_112 = round_key_96 ^ tmp_init_0;
    round_key_112 = round_key_112 ^ mp;
    round_key_113 = round_key_97 ^ tmp_init_1;
    round_key_113 = round_key_113 ^ mp;
    round_key_114 = round_key_98 ^ tmp_init_2;
    round_key_114 = round_key_114 ^ mp;
    round_key_115 = round_key_99 ^ tmp_init_3;
    round_key_115 = round_key_115 ^ mp;

    tmp_init_0 = round_key_112;
    tmp_init_1 = round_key_113;
    tmp_init_2 = round_key_114;
    tmp_init_3 = round_key_115;
    round_key_116 = round_key_100 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_116 = round_key_116 ^ tmp_init_0;
    round_key_117 = round_key_101 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_117 = round_key_117 ^ tmp_init_1;
    round_key_118 = round_key_102 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_118 = round_key_118 ^ tmp_init_2;
    round_key_119 = round_key_103 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_119 = round_key_119 ^ tmp_init_3;

    tmp_init_0 = round_key_116;
    tmp_init_1 = round_key_117;
    tmp_init_2 = round_key_118;
    tmp_init_3 = round_key_119;
    round_key_120 = round_key_104 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_120 = round_key_120 ^ tmp_init_0;
    round_key_121 = round_key_105 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_121 = round_key_121 ^ tmp_init_1;
    round_key_122 = round_key_106 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_122 = round_key_122 ^ tmp_init_2;
    round_key_123 = round_key_107 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_123 = round_key_123 ^ tmp_init_3;

    tmp_init_0 = round_key_120;
    tmp_init_1 = round_key_121;
    tmp_init_2 = round_key_122;
    tmp_init_3 = round_key_123;
    round_key_124 = round_key_108 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_124 = round_key_124 ^ tmp_init_0;
    round_key_125 = round_key_109 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_125 = round_key_125 ^ tmp_init_1;
    round_key_126 = round_key_110 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_126 = round_key_126 ^ tmp_init_2;
    round_key_127 = round_key_111 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_127 = round_key_127 ^ tmp_init_3;

    tmp_init_0 = round_key_124;
    tmp_init_1 = round_key_125;
    tmp_init_2 = round_key_126;
    tmp_init_3 = round_key_127;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox80;
    round_key_128 = round_key_112 ^ tmp_init_0;
    round_key_128 = round_key_128 ^ mp;
    round_key_129 = round_key_113 ^ tmp_init_1;
    round_key_129 = round_key_129 ^ mp;
    round_key_130 = round_key_114 ^ tmp_init_2;
    round_key_130 = round_key_130 ^ mp;
    round_key_131 = round_key_115 ^ tmp_init_3;
    round_key_131 = round_key_131 ^ mp;

    tmp_init_0 = round_key_128;
    tmp_init_1 = round_key_129;
    tmp_init_2 = round_key_130;
    tmp_init_3 = round_key_131;
    round_key_132 = round_key_116 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_132 = round_key_132 ^ tmp_init_0;
    round_key_133 = round_key_117 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_133 = round_key_133 ^ tmp_init_1;
    round_key_134 = round_key_118 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_134 = round_key_134 ^ tmp_init_2;
    round_key_135 = round_key_119 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_135 = round_key_135 ^ tmp_init_3;

    tmp_init_0 = round_key_132;
    tmp_init_1 = round_key_133;
    tmp_init_2 = round_key_134;
    tmp_init_3 = round_key_135;
    round_key_136 = round_key_120 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_136 = round_key_136 ^ tmp_init_0;
    round_key_137 = round_key_121 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_137 = round_key_137 ^ tmp_init_1;
    round_key_138 = round_key_122 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_138 = round_key_138 ^ tmp_init_2;
    round_key_139 = round_key_123 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_139 = round_key_139 ^ tmp_init_3;

    tmp_init_0 = round_key_136;
    tmp_init_1 = round_key_137;
    tmp_init_2 = round_key_138;
    tmp_init_3 = round_key_139;
    round_key_140 = round_key_124 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_140 = round_key_140 ^ tmp_init_0;
    round_key_141 = round_key_125 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_141 = round_key_141 ^ tmp_init_1;
    round_key_142 = round_key_126 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_142 = round_key_142 ^ tmp_init_2;
    round_key_143 = round_key_127 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_143 = round_key_143 ^ tmp_init_3;

    tmp_init_0 = round_key_140;
    tmp_init_1 = round_key_141;
    tmp_init_2 = round_key_142;
    tmp_init_3 = round_key_143;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox1b;
    round_key_144 = round_key_128 ^ tmp_init_0;
    round_key_144 = round_key_144 ^ mp;
    round_key_145 = round_key_129 ^ tmp_init_1;
    round_key_145 = round_key_145 ^ mp;
    round_key_146 = round_key_130 ^ tmp_init_2;
    round_key_146 = round_key_146 ^ mp;
    round_key_147 = round_key_131 ^ tmp_init_3;
    round_key_147 = round_key_147 ^ mp;

    tmp_init_0 = round_key_144;
    tmp_init_1 = round_key_145;
    tmp_init_2 = round_key_146;
    tmp_init_3 = round_key_147;
    round_key_148 = round_key_132 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_148 = round_key_148 ^ tmp_init_0;
    round_key_149 = round_key_133 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_149 = round_key_149 ^ tmp_init_1;
    round_key_150 = round_key_134 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_150 = round_key_150 ^ tmp_init_2;
    round_key_151 = round_key_135 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_151 = round_key_151 ^ tmp_init_3;

    tmp_init_0 = round_key_148;
    tmp_init_1 = round_key_149;
    tmp_init_2 = round_key_150;
    tmp_init_3 = round_key_151;
    round_key_152 = round_key_136 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_152 = round_key_152 ^ tmp_init_0;
    round_key_153 = round_key_137 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_153 = round_key_153 ^ tmp_init_1;
    round_key_154 = round_key_138 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_154 = round_key_154 ^ tmp_init_2;
    round_key_155 = round_key_139 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_155 = round_key_155 ^ tmp_init_3;

    tmp_init_0 = round_key_152;
    tmp_init_1 = round_key_153;
    tmp_init_2 = round_key_154;
    tmp_init_3 = round_key_155;
    round_key_156 = round_key_140 ^ m;
    tmp_init_0 = tmp_init_0 ^ mpt_0;
    round_key_156 = round_key_156 ^ tmp_init_0;
    round_key_157 = round_key_141 ^ m;
    tmp_init_1 = tmp_init_1 ^ mpt_1;
    round_key_157 = round_key_157 ^ tmp_init_1;
    round_key_158 = round_key_142 ^ m;
    tmp_init_2 = tmp_init_2 ^ mpt_2;
    round_key_158 = round_key_158 ^ tmp_init_2;
    round_key_159 = round_key_143 ^ m;
    tmp_init_3 = tmp_init_3 ^ mpt_3;
    round_key_159 = round_key_159 ^ tmp_init_3;


    (* For the last key, we mask it with M' *)

    tmp_init_0 = round_key_156;
    tmp_init_1 = round_key_157;
    tmp_init_2 = round_key_158;
    tmp_init_3 = round_key_159;
    k = tmp_init_0 ^ mpt_0;
    tmp_init_0 = tmp_init_1 ^ mpt_1;
    tmp_init_1 = tmp_init_2 ^ mpt_2;
    tmp_init_2 = tmp_init_3 ^ mpt_3;
    tmp_init_3 = k;
    tmp_init_0 = sbox tmp_init_0;
    tmp_init_0 = tmp_init_0 ^ mp;
    tmp_init_1 = sbox tmp_init_1;
    tmp_init_1 = tmp_init_1 ^ mp;
    tmp_init_2 = sbox tmp_init_2;
    tmp_init_2 = tmp_init_2 ^ mp;
    tmp_init_3 = sbox tmp_init_3;
    tmp_init_3 = tmp_init_3 ^ mp;
    tmp_init_0 = tmp_init_0 ^ Ox36;
    round_key_160 = round_key_144 ^ tmp_init_0;
    round_key_160 = round_key_160 ^ m;
    round_key_160 = round_key_160 ^ mpt_0;
    round_key_161 = round_key_145 ^ tmp_init_1;
    round_key_161 = round_key_161 ^ m;
    round_key_161 = round_key_161 ^ mpt_1;
    round_key_162 = round_key_146 ^ tmp_init_2;
    round_key_162 = round_key_162 ^ m;
    round_key_162 = round_key_162 ^ mpt_2;
    round_key_163 = round_key_147 ^ tmp_init_3;
    round_key_163 = round_key_163 ^ m;
    round_key_163 = round_key_163 ^ mpt_3;

    tmp_init_0 = round_key_160;
    tmp_init_1 = round_key_161;
    tmp_init_2 = round_key_162;
    tmp_init_3 = round_key_163;
    round_key_164 = round_key_148 ^ tmp_init_0;
    round_key_164 = round_key_164 ^ m;
    round_key_164 = round_key_164 ^ mpt_0;
    round_key_165 = round_key_149 ^ tmp_init_1;
    round_key_165 = round_key_165 ^ m;
    round_key_165 = round_key_165 ^ mpt_1;
    round_key_166 = round_key_150 ^ tmp_init_2;
    round_key_166 = round_key_166 ^ m;
    round_key_166 = round_key_166 ^ mpt_2;
    round_key_167 = round_key_151 ^ tmp_init_3;
    round_key_167 = round_key_167 ^ m;
    round_key_167 = round_key_167 ^ mpt_3;

    tmp_init_0 = round_key_164;
    tmp_init_1 = round_key_165;
    tmp_init_2 = round_key_166;
    tmp_init_3 = round_key_167;
    round_key_168 = round_key_152 ^ tmp_init_0;
    round_key_168 = round_key_168 ^ m;
    round_key_168 = round_key_168 ^ mpt_0;
    round_key_169 = round_key_153 ^ tmp_init_1;
    round_key_169 = round_key_169 ^ m;
    round_key_169 = round_key_169 ^ mpt_1;
    round_key_170 = round_key_154 ^ tmp_init_2;
    round_key_170 = round_key_170 ^ m;
    round_key_170 = round_key_170 ^ mpt_2;
    round_key_171 = round_key_155 ^ tmp_init_3;
    round_key_171 = round_key_171 ^ m;
    round_key_171 = round_key_171 ^ mpt_3;

    tmp_init_0 = round_key_168;
    tmp_init_1 = round_key_169;
    tmp_init_2 = round_key_170;
    tmp_init_3 = round_key_171;
    round_key_172 = round_key_156 ^ tmp_init_0;
    round_key_172 = round_key_172 ^ m;
    round_key_172 = round_key_172 ^ mpt_0;
    round_key_173 = round_key_157 ^ tmp_init_1;
    round_key_173 = round_key_173 ^ m;
    round_key_173 = round_key_173 ^ mpt_1;
    round_key_174 = round_key_158 ^ tmp_init_2;
    round_key_174 = round_key_174 ^ m;
    round_key_174 = round_key_174 ^ mpt_2;
    round_key_175 = round_key_159 ^ tmp_init_3;
    round_key_175 = round_key_175 ^ m;
    round_key_175 = round_key_175 ^ mpt_3;

    (* ########################## *)
    (*     Masking plain text     *)
    (* ########################## *)

    x_0_0 = plain_text_0 ^ mpt_0;
    x_0_1 = plain_text_4 ^ mpt_0;
    x_0_2 = plain_text_8 ^ mpt_0;
    x_0_3 = plain_text_12 ^ mpt_0;
    x_1_0 = plain_text_1 ^ mpt_1;
    x_1_1 = plain_text_5 ^ mpt_1;
    x_1_2 = plain_text_9 ^ mpt_1;
    x_1_3 = plain_text_13 ^ mpt_1;
    x_2_0 = plain_text_2 ^ mpt_2;
    x_2_1 = plain_text_6 ^ mpt_2;
    x_2_2 = plain_text_10 ^ mpt_2;
    x_2_3 = plain_text_14 ^ mpt_2;
    x_3_0 = plain_text_3 ^ mpt_3;
    x_3_1 = plain_text_7 ^ mpt_3;
    x_3_2 = plain_text_11 ^ mpt_3;
    x_3_3 = plain_text_15 ^ mpt_3;


    (* ####################### *)
    (*         Round 0         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_0;
    x_1_0 = x_1_0 ^ round_key_1;
    x_2_0 = x_2_0 ^ round_key_2;
    x_3_0 = x_3_0 ^ round_key_3;
    x_0_1 = x_0_1 ^ round_key_4;
    x_1_1 = x_1_1 ^ round_key_5;
    x_2_1 = x_2_1 ^ round_key_6;
    x_3_1 = x_3_1 ^ round_key_7;
    x_0_2 = x_0_2 ^ round_key_8;
    x_1_2 = x_1_2 ^ round_key_9;
    x_2_2 = x_2_2 ^ round_key_10;
    x_3_2 = x_3_2 ^ round_key_11;
    x_0_3 = x_0_3 ^ round_key_12;
    x_1_3 = x_1_3 ^ round_key_13;
    x_2_3 = x_2_3 ^ round_key_14;
    x_3_3 = x_3_3 ^ round_key_15;

    (*     Masking sub bytes     *)
    var tmp_sub_bytes_0;
    var tmp_sub_bytes_1;
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    var tmp_shift_row;
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 1         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_16;
    x_1_0 = x_1_0 ^ round_key_17;
    x_2_0 = x_2_0 ^ round_key_18;
    x_3_0 = x_3_0 ^ round_key_19;
    x_0_1 = x_0_1 ^ round_key_20;
    x_1_1 = x_1_1 ^ round_key_21;
    x_2_1 = x_2_1 ^ round_key_22;
    x_3_1 = x_3_1 ^ round_key_23;
    x_0_2 = x_0_2 ^ round_key_24;
    x_1_2 = x_1_2 ^ round_key_25;
    x_2_2 = x_2_2 ^ round_key_26;
    x_3_2 = x_3_2 ^ round_key_27;
    x_0_3 = x_0_3 ^ round_key_28;
    x_1_3 = x_1_3 ^ round_key_29;
    x_2_3 = x_2_3 ^ round_key_30;
    x_3_3 = x_3_3 ^ round_key_31;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 2         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_32;
    x_1_0 = x_1_0 ^ round_key_33;
    x_2_0 = x_2_0 ^ round_key_34;
    x_3_0 = x_3_0 ^ round_key_35;
    x_0_1 = x_0_1 ^ round_key_36;
    x_1_1 = x_1_1 ^ round_key_37;
    x_2_1 = x_2_1 ^ round_key_38;
    x_3_1 = x_3_1 ^ round_key_39;
    x_0_2 = x_0_2 ^ round_key_40;
    x_1_2 = x_1_2 ^ round_key_41;
    x_2_2 = x_2_2 ^ round_key_42;
    x_3_2 = x_3_2 ^ round_key_43;
    x_0_3 = x_0_3 ^ round_key_44;
    x_1_3 = x_1_3 ^ round_key_45;
    x_2_3 = x_2_3 ^ round_key_46;
    x_3_3 = x_3_3 ^ round_key_47;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 3         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_48;
    x_1_0 = x_1_0 ^ round_key_49;
    x_2_0 = x_2_0 ^ round_key_50;
    x_3_0 = x_3_0 ^ round_key_51;
    x_0_1 = x_0_1 ^ round_key_52;
    x_1_1 = x_1_1 ^ round_key_53;
    x_2_1 = x_2_1 ^ round_key_54;
    x_3_1 = x_3_1 ^ round_key_55;
    x_0_2 = x_0_2 ^ round_key_56;
    x_1_2 = x_1_2 ^ round_key_57;
    x_2_2 = x_2_2 ^ round_key_58;
    x_3_2 = x_3_2 ^ round_key_59;
    x_0_3 = x_0_3 ^ round_key_60;
    x_1_3 = x_1_3 ^ round_key_61;
    x_2_3 = x_2_3 ^ round_key_62;
    x_3_3 = x_3_3 ^ round_key_63;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 4         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_64;
    x_1_0 = x_1_0 ^ round_key_65;
    x_2_0 = x_2_0 ^ round_key_66;
    x_3_0 = x_3_0 ^ round_key_67;
    x_0_1 = x_0_1 ^ round_key_68;
    x_1_1 = x_1_1 ^ round_key_69;
    x_2_1 = x_2_1 ^ round_key_70;
    x_3_1 = x_3_1 ^ round_key_71;
    x_0_2 = x_0_2 ^ round_key_72;
    x_1_2 = x_1_2 ^ round_key_73;
    x_2_2 = x_2_2 ^ round_key_74;
    x_3_2 = x_3_2 ^ round_key_75;
    x_0_3 = x_0_3 ^ round_key_76;
    x_1_3 = x_1_3 ^ round_key_77;
    x_2_3 = x_2_3 ^ round_key_78;
    x_3_3 = x_3_3 ^ round_key_79;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 5         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_80;
    x_1_0 = x_1_0 ^ round_key_81;
    x_2_0 = x_2_0 ^ round_key_82;
    x_3_0 = x_3_0 ^ round_key_83;
    x_0_1 = x_0_1 ^ round_key_84;
    x_1_1 = x_1_1 ^ round_key_85;
    x_2_1 = x_2_1 ^ round_key_86;
    x_3_1 = x_3_1 ^ round_key_87;
    x_0_2 = x_0_2 ^ round_key_88;
    x_1_2 = x_1_2 ^ round_key_89;
    x_2_2 = x_2_2 ^ round_key_90;
    x_3_2 = x_3_2 ^ round_key_91;
    x_0_3 = x_0_3 ^ round_key_92;
    x_1_3 = x_1_3 ^ round_key_93;
    x_2_3 = x_2_3 ^ round_key_94;
    x_3_3 = x_3_3 ^ round_key_95;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 6         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_96;
    x_1_0 = x_1_0 ^ round_key_97;
    x_2_0 = x_2_0 ^ round_key_98;
    x_3_0 = x_3_0 ^ round_key_99;
    x_0_1 = x_0_1 ^ round_key_100;
    x_1_1 = x_1_1 ^ round_key_101;
    x_2_1 = x_2_1 ^ round_key_102;
    x_3_1 = x_3_1 ^ round_key_103;
    x_0_2 = x_0_2 ^ round_key_104;
    x_1_2 = x_1_2 ^ round_key_105;
    x_2_2 = x_2_2 ^ round_key_106;
    x_3_2 = x_3_2 ^ round_key_107;
    x_0_3 = x_0_3 ^ round_key_108;
    x_1_3 = x_1_3 ^ round_key_109;
    x_2_3 = x_2_3 ^ round_key_110;
    x_3_3 = x_3_3 ^ round_key_111;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 7         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_112;
    x_1_0 = x_1_0 ^ round_key_113;
    x_2_0 = x_2_0 ^ round_key_114;
    x_3_0 = x_3_0 ^ round_key_115;
    x_0_1 = x_0_1 ^ round_key_116;
    x_1_1 = x_1_1 ^ round_key_117;
    x_2_1 = x_2_1 ^ round_key_118;
    x_3_1 = x_3_1 ^ round_key_119;
    x_0_2 = x_0_2 ^ round_key_120;
    x_1_2 = x_1_2 ^ round_key_121;
    x_2_2 = x_2_2 ^ round_key_122;
    x_3_2 = x_3_2 ^ round_key_123;
    x_0_3 = x_0_3 ^ round_key_124;
    x_1_3 = x_1_3 ^ round_key_125;
    x_2_3 = x_2_3 ^ round_key_126;
    x_3_3 = x_3_3 ^ round_key_127;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (* ####################### *)
    (*         Round 8         *)
    (* ####################### *)

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_128;
    x_1_0 = x_1_0 ^ round_key_129;
    x_2_0 = x_2_0 ^ round_key_130;
    x_3_0 = x_3_0 ^ round_key_131;
    x_0_1 = x_0_1 ^ round_key_132;
    x_1_1 = x_1_1 ^ round_key_133;
    x_2_1 = x_2_1 ^ round_key_134;
    x_3_1 = x_3_1 ^ round_key_135;
    x_0_2 = x_0_2 ^ round_key_136;
    x_1_2 = x_1_2 ^ round_key_137;
    x_2_2 = x_2_2 ^ round_key_138;
    x_3_2 = x_3_2 ^ round_key_139;
    x_0_3 = x_0_3 ^ round_key_140;
    x_1_3 = x_1_3 ^ round_key_141;
    x_2_3 = x_2_3 ^ round_key_142;
    x_3_3 = x_3_3 ^ round_key_143;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Changing masks     *)
    x_0_0 = (x_0_0 ^ mt_0);
    x_0_0 = (x_0_0 ^ mp;
    x_0_1 = (x_0_1 ^ mt_0);
    x_0_1 = (x_0_1 ^ mp;
    x_0_2 = (x_0_2 ^ mt_0);
    x_0_2 = (x_0_2 ^ mp;
    x_0_3 = (x_0_3 ^ mt_0);
    x_0_3 = (x_0_3 ^ mp;
    x_1_0 = (x_1_0 ^ mt_1);
    x_1_0 = (x_1_0 ^ mp;
    x_1_1 = (x_1_1 ^ mt_1);
    x_1_1 = (x_1_1 ^ mp;
    x_1_2 = (x_1_2 ^ mt_1);
    x_1_2 = (x_1_2 ^ mp;
    x_1_3 = (x_1_3 ^ mt_1);
    x_1_3 = (x_1_3 ^ mp;
    x_2_0 = (x_2_0 ^ mt_2);
    x_2_0 = (x_2_0 ^ mp;
    x_2_1 = (x_2_1 ^ mt_2);
    x_2_1 = (x_2_1 ^ mp;
    x_2_2 = (x_2_2 ^ mt_2);
    x_2_2 = (x_2_2 ^ mp;
    x_2_3 = (x_2_3 ^ mt_2);
    x_2_3 = (x_2_3 ^ mp;
    x_3_0 = (x_3_0 ^ mt_3);
    x_3_0 = (x_3_0 ^ mp;
    x_3_1 = (x_3_1 ^ mt_3);
    x_3_1 = (x_3_1 ^ mp;
    x_3_2 = (x_3_2 ^ mt_3);
    x_3_2 = (x_3_2 ^ mp;
    x_3_3 = (x_3_3 ^ mt_3);
    x_3_3 = (x_3_3 ^ mp;

    (*     Mix columns     *)
    (*     Column 0     *)
    tmp_mix_0 = x_0_0;
    tmp_mix_1 = x_1_0;
    tmp_mix_2 = x_2_0;
    tmp_mix_3 = x_3_0;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_0 = double ^ tmp_mix_3 ;
    x_0_0 = x_0_0 ^ tmp_mix_2;
    x_0_0 = x_0_0 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_0 = double ^ tmp_mix_0 ;
    x_1_0 = x_1_0 ^ tmp_mix_3;
    x_1_0 = x_1_0 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_0 = double ^ tmp_mix_1 ;
    x_2_0 = x_2_0 ^ tmp_mix_0;
    x_2_0 = x_2_0 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_0 = double ^ tmp_mix_2 ;
    x_3_0 = x_3_0 ^ tmp_mix_1;
    x_3_0 = x_3_0 ^ triple;
    (*     Column 1     *)
    tmp_mix_0 = x_0_1;
    tmp_mix_1 = x_1_1;
    tmp_mix_2 = x_2_1;
    tmp_mix_3 = x_3_1;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_1 = double ^ tmp_mix_3 ;
    x_0_1 = x_0_1 ^ tmp_mix_2;
    x_0_1 = x_0_1 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_1 = double ^ tmp_mix_0 ;
    x_1_1 = x_1_1 ^ tmp_mix_3;
    x_1_1 = x_1_1 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_1 = double ^ tmp_mix_1 ;
    x_2_1 = x_2_1 ^ tmp_mix_0;
    x_2_1 = x_2_1 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_1 = double ^ tmp_mix_2 ;
    x_3_1 = x_3_1 ^ tmp_mix_1;
    x_3_1 = x_3_1 ^ triple;
    (*     Column 2     *)
    tmp_mix_0 = x_0_2;
    tmp_mix_1 = x_1_2;
    tmp_mix_2 = x_2_2;
    tmp_mix_3 = x_3_2;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_2 = double ^ tmp_mix_3 ;
    x_0_2 = x_0_2 ^ tmp_mix_2;
    x_0_2 = x_0_2 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_2 = double ^ tmp_mix_0 ;
    x_1_2 = x_1_2 ^ tmp_mix_3;
    x_1_2 = x_1_2 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_2 = double ^ tmp_mix_1 ;
    x_2_2 = x_2_2 ^ tmp_mix_0;
    x_2_2 = x_2_2 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_2 = double ^ tmp_mix_2 ;
    x_3_2 = x_3_2 ^ tmp_mix_1;
    x_3_2 = x_3_2 ^ triple;
    (*     Column 3     *)
    tmp_mix_0 = x_0_3;
    tmp_mix_1 = x_1_3;
    tmp_mix_2 = x_2_3;
    tmp_mix_3 = x_3_3;
    double = Ox02 * tmp_mix_0;
    triple = Ox03 * tmp_mix_1;
    x_0_3 = double ^ tmp_mix_3 ;
    x_0_3 = x_0_3 ^ tmp_mix_2;
    x_0_3 = x_0_3 ^ triple;
    double = Ox02 * tmp_mix_1;
    triple = Ox03 * tmp_mix_2;
    x_1_3 = double ^ tmp_mix_0 ;
    x_1_3 = x_1_3 ^ tmp_mix_3;
    x_1_3 = x_1_3 ^ triple;
    double = Ox02 * tmp_mix_2;
    triple = Ox03 * tmp_mix_3;
    x_2_3 = double ^ tmp_mix_1 ;
    x_2_3 = x_2_3 ^ tmp_mix_0;
    x_2_3 = x_2_3 ^ triple;
    double = Ox02 * tmp_mix_3;
    triple = Ox03 * tmp_mix_0;
    x_3_3 = double ^ tmp_mix_2 ;
    x_3_3 = x_3_3 ^ tmp_mix_1;
    x_3_3 = x_3_3 ^ triple;

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_144;
    x_1_0 = x_1_0 ^ round_key_145;
    x_2_0 = x_2_0 ^ round_key_146;
    x_3_0 = x_3_0 ^ round_key_147;
    x_0_1 = x_0_1 ^ round_key_148;
    x_1_1 = x_1_1 ^ round_key_149;
    x_2_1 = x_2_1 ^ round_key_150;
    x_3_1 = x_3_1 ^ round_key_151;
    x_0_2 = x_0_2 ^ round_key_152;
    x_1_2 = x_1_2 ^ round_key_153;
    x_2_2 = x_2_2 ^ round_key_154;
    x_3_2 = x_3_2 ^ round_key_155;
    x_0_3 = x_0_3 ^ round_key_156;
    x_1_3 = x_1_3 ^ round_key_157;
    x_2_3 = x_2_3 ^ round_key_158;
    x_3_3 = x_3_3 ^ round_key_159;

    (*     Masking sub bytes     *)
    tmp_sub_bytes_0 = x_0_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_0_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_0_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_1_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_1_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_2_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_2_3 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_0 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_0 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_1 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_1 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_2 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_2 = tmp_sub_bytes_1 ^ mp;
    tmp_sub_bytes_0 = x_3_3 ^ m;
    tmp_sub_bytes_1 = sbox tmp_sub_bytes_0;
    x_3_3 = tmp_sub_bytes_1 ^ mp;

    (*     Shifting rows     *)
    tmp_shift_row = x_1_0;
    x_1_0 = x_1_1;
    x_1_1 = x_1_2;
    x_1_2 = x_1_3;
    x_1_3 = tmp_shift_row;
    tmp_shift_row = x_2_0;
    x_2_0 = x_2_2;
    x_2_2 = tmp_shift_row
    tmp_shift_row = x_2_1;
    x_2_1 = x_2_3;
    x_2_3 = tmp_shift_row;
    tmp_shift_row = x_3_0;
    x_3_0 = x_3_3;
    x_3_3 = x_3_2;
    x_3_2 = x_3_1;
    x_3_1 = tmp_shift_row;

    (*     Add round key     *)
    x_0_0 = x_0_0 ^ round_key_160;
    x_1_0 = x_1_0 ^ round_key_161;
    x_2_0 = x_2_0 ^ round_key_162;
    x_3_0 = x_3_0 ^ round_key_163;
    x_0_1 = x_0_1 ^ round_key_164;
    x_1_1 = x_1_1 ^ round_key_165;
    x_2_1 = x_2_1 ^ round_key_166;
    x_3_1 = x_3_1 ^ round_key_167;
    x_0_2 = x_0_2 ^ round_key_168;
    x_1_2 = x_1_2 ^ round_key_169;
    x_2_2 = x_2_2 ^ round_key_170;
    x_3_2 = x_3_2 ^ round_key_171;
    x_0_3 = x_0_3 ^ round_key_172;
    x_1_3 = x_1_3 ^ round_key_173;
    x_2_3 = x_2_3 ^ round_key_174;
    x_3_3 = x_3_3 ^ round_key_175;

    ciphered_text_0 = x_0_0;
    ciphered_text_1 = x_1_0;
    ciphered_text_2 = x_2_0;
    ciphered_text_3 = x_3_0;
    ciphered_text_4 = x_0_1;
    ciphered_text_5 = x_1_1;
    ciphered_text_6 = x_2_1;
    ciphered_text_7 = x_3_1;
    ciphered_text_8 = x_0_2;
    ciphered_text_9 = x_1_2;
    ciphered_text_10 = x_2_2;
    ciphered_text_11 = x_3_2;
    ciphered_text_12 = x_0_3;
    ciphered_text_13 = x_1_3;
    ciphered_text_14 = x_2_3;
    ciphered_text_15 = x_3_3;
  }
}
