# File Sbox6.py
#
# Copyright (C) 2021, Sorbonne Universite, LIP6
# This file is part of the MaskedVerifBench project, under the GPL v3.0 license
# See https://www.gnu.org/licenses/gpl-3.0.en.html for license information
# SPDX-License-Identifier: GPL-3.0-only
# Author(s): Etienne Pons


from leakage_verif import *
from maskedbench_utils import *

x = symbol('x', 'S', 8)
Ox63 = constant(99, 8)
x_0 = symbol('x_0', 'M', 8)
x_1 = symbol('x_1', 'M', 8)
refresh_0_1 = symbol('refresh_0_1', 'M', 8)
refresh_0_2 = symbol('refresh_0_2', 'M', 8)
r_0_0_1 = symbol('r_0_0_1', 'M', 8)
r_0_0_2 = symbol('r_0_0_2', 'M', 8)
r_0_1_2 = symbol('r_0_1_2', 'M', 8)
refresh_1_1 = symbol('refresh_1_1', 'M', 8)
refresh_1_2 = symbol('refresh_1_2', 'M', 8)
r_1_0_1 = symbol('r_1_0_1', 'M', 8)
r_1_0_2 = symbol('r_1_0_2', 'M', 8)
r_1_1_2 = symbol('r_1_1_2', 'M', 8)
r_2_0_1 = symbol('r_2_0_1', 'M', 8)
r_2_0_2 = symbol('r_2_0_2', 'M', 8)
r_2_1_2 = symbol('r_2_1_2', 'M', 8)
r_3_0_1 = symbol('r_3_0_1', 'M', 8)
r_3_0_2 = symbol('r_3_0_2', 'M', 8)
r_3_1_2 = symbol('r_3_1_2', 'M', 8)

x_2 = x ^ x_0 ^ x_1
x_2 = verif(x_2, 1, 103)
z_0 = x_0 * x_0
z_0 = verif(z_0, 2, 103)
z_1 = x_1 * x_1
z_1 = verif(z_1, 3, 103)
z_2 = x_2 * x_2
z_2 = verif(z_2, 4, 103)
z_0 = z_0 ^ refresh_0_1
z_0 = verif(z_0, 5, 103)
z_1 = z_1 ^ refresh_0_1
z_1 = verif(z_1, 6, 103)
z_0 = z_0 ^ refresh_0_2
z_0 = verif(z_0, 7, 103)
z_2 = z_2 ^ refresh_0_2
z_2 = verif(z_2, 8, 103)
tmp_secMult_i_j = z_0 * x_1
tmp_secMult_i_j = verif(tmp_secMult_i_j, 9, 103)
tmp_secMult_j_i = z_1 * x_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 10, 103)
r_0_1_0 = r_0_0_1 ^ tmp_secMult_i_j
r_0_1_0 = verif(r_0_1_0, 11, 103)
r_0_1_0 = r_0_1_0 ^ tmp_secMult_j_i
r_0_1_0 = verif(r_0_1_0, 12, 103)
tmp_secMult_i_j = z_0 * x_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 13, 103)
tmp_secMult_j_i = z_2 * x_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 14, 103)
r_0_2_0 = r_0_0_2 ^ tmp_secMult_i_j
r_0_2_0 = verif(r_0_2_0, 15, 103)
r_0_2_0 = r_0_2_0 ^ tmp_secMult_j_i
r_0_2_0 = verif(r_0_2_0, 16, 103)
tmp_secMult_i_j = z_1 * x_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 17, 103)
tmp_secMult_j_i = z_2 * x_1
tmp_secMult_j_i = verif(tmp_secMult_j_i, 18, 103)
r_0_2_1 = r_0_1_2 ^ tmp_secMult_i_j
r_0_2_1 = verif(r_0_2_1, 19, 103)
r_0_2_1 = r_0_2_1 ^ tmp_secMult_j_i
r_0_2_1 = verif(r_0_2_1, 20, 103)
y_0 = z_0 * x_0
y_0 = verif(y_0, 21, 103)
y_0 = y_0 ^ r_0_0_1
y_0 = verif(y_0, 22, 103)
y_0 = y_0 ^ r_0_0_2
y_0 = verif(y_0, 23, 103)
y_1 = z_1 * x_1
y_1 = verif(y_1, 24, 103)
y_1 = y_1 ^ r_0_1_0
y_1 = verif(y_1, 25, 103)
y_1 = y_1 ^ r_0_1_2
y_1 = verif(y_1, 26, 103)
y_2 = z_2 * x_2
y_2 = verif(y_2, 27, 103)
y_2 = y_2 ^ r_0_2_0
y_2 = verif(y_2, 28, 103)
y_2 = y_2 ^ r_0_2_1
y_2 = verif(y_2, 29, 103)
w_0 = y_0 * y_0 * y_0 * y_0
w_0 = verif(w_0, 30, 103)
w_1 = y_1 * y_1 * y_1 * y_1
w_1 = verif(w_1, 31, 103)
w_2 = y_2 * y_2 * y_2 * y_2
w_2 = verif(w_2, 32, 103)
w_0 = w_0 ^ refresh_1_1
w_0 = verif(w_0, 33, 103)
w_1 = w_1 ^ refresh_1_1
w_1 = verif(w_1, 34, 103)
w_0 = w_0 ^ refresh_1_2
w_0 = verif(w_0, 35, 103)
w_2 = w_2 ^ refresh_1_2
w_2 = verif(w_2, 36, 103)
tmp_secMult_i_j = y_0 * w_1
tmp_secMult_i_j = verif(tmp_secMult_i_j, 37, 103)
tmp_secMult_j_i = y_1 * w_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 38, 103)
r_1_1_0 = r_1_0_1 ^ tmp_secMult_i_j
r_1_1_0 = verif(r_1_1_0, 39, 103)
r_1_1_0 = r_1_1_0 ^ tmp_secMult_j_i
r_1_1_0 = verif(r_1_1_0, 40, 103)
tmp_secMult_i_j = y_0 * w_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 41, 103)
tmp_secMult_j_i = y_2 * w_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 42, 103)
r_1_2_0 = r_1_0_2 ^ tmp_secMult_i_j
r_1_2_0 = verif(r_1_2_0, 43, 103)
r_1_2_0 = r_1_2_0 ^ tmp_secMult_j_i
r_1_2_0 = verif(r_1_2_0, 44, 103)
tmp_secMult_i_j = y_1 * w_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 45, 103)
tmp_secMult_j_i = y_2 * w_1
tmp_secMult_j_i = verif(tmp_secMult_j_i, 46, 103)
r_1_2_1 = r_1_1_2 ^ tmp_secMult_i_j
r_1_2_1 = verif(r_1_2_1, 47, 103)
r_1_2_1 = r_1_2_1 ^ tmp_secMult_j_i
r_1_2_1 = verif(r_1_2_1, 48, 103)
y_0 = y_0 * w_0
y_0 = verif(y_0, 49, 103)
y_0 = y_0 ^ r_1_0_1
y_0 = verif(y_0, 50, 103)
y_0 = y_0 ^ r_1_0_2
y_0 = verif(y_0, 51, 103)
y_1 = y_1 * w_1
y_1 = verif(y_1, 52, 103)
y_1 = y_1 ^ r_1_1_0
y_1 = verif(y_1, 53, 103)
y_1 = y_1 ^ r_1_1_2
y_1 = verif(y_1, 54, 103)
y_2 = y_2 * w_2
y_2 = verif(y_2, 55, 103)
y_2 = y_2 ^ r_1_2_0
y_2 = verif(y_2, 56, 103)
y_2 = y_2 ^ r_1_2_1
y_2 = verif(y_2, 57, 103)
y_0 = y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0
y_0 = verif(y_0, 58, 103)
y_1 = y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1
y_1 = verif(y_1, 59, 103)
y_2 = y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2
y_2 = verif(y_2, 60, 103)
tmp_secMult_i_j = y_0 * w_1
tmp_secMult_i_j = verif(tmp_secMult_i_j, 61, 103)
tmp_secMult_j_i = y_1 * w_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 62, 103)
r_2_1_0 = r_2_0_1 ^ tmp_secMult_i_j
r_2_1_0 = verif(r_2_1_0, 63, 103)
r_2_1_0 = r_2_1_0 ^ tmp_secMult_j_i
r_2_1_0 = verif(r_2_1_0, 64, 103)
tmp_secMult_i_j = y_0 * w_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 65, 103)
tmp_secMult_j_i = y_2 * w_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 66, 103)
r_2_2_0 = r_2_0_2 ^ tmp_secMult_i_j
r_2_2_0 = verif(r_2_2_0, 67, 103)
r_2_2_0 = r_2_2_0 ^ tmp_secMult_j_i
r_2_2_0 = verif(r_2_2_0, 68, 103)
tmp_secMult_i_j = y_1 * w_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 69, 103)
tmp_secMult_j_i = y_2 * w_1
tmp_secMult_j_i = verif(tmp_secMult_j_i, 70, 103)
r_2_2_1 = r_2_1_2 ^ tmp_secMult_i_j
r_2_2_1 = verif(r_2_2_1, 71, 103)
r_2_2_1 = r_2_2_1 ^ tmp_secMult_j_i
r_2_2_1 = verif(r_2_2_1, 72, 103)
y_0 = y_0 * w_0
y_0 = verif(y_0, 73, 103)
y_0 = y_0 ^ r_2_0_1
y_0 = verif(y_0, 74, 103)
y_0 = y_0 ^ r_2_0_2
y_0 = verif(y_0, 75, 103)
y_1 = y_1 * w_1
y_1 = verif(y_1, 76, 103)
y_1 = y_1 ^ r_2_1_0
y_1 = verif(y_1, 77, 103)
y_1 = y_1 ^ r_2_1_2
y_1 = verif(y_1, 78, 103)
y_2 = y_2 * w_2
y_2 = verif(y_2, 79, 103)
y_2 = y_2 ^ r_2_2_0
y_2 = verif(y_2, 80, 103)
y_2 = y_2 ^ r_2_2_1
y_2 = verif(y_2, 81, 103)
tmp_secMult_i_j = y_0 * z_1
tmp_secMult_i_j = verif(tmp_secMult_i_j, 82, 103)
tmp_secMult_j_i = y_1 * z_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 83, 103)
r_3_1_0 = r_3_0_1 ^ tmp_secMult_i_j
r_3_1_0 = verif(r_3_1_0, 84, 103)
r_3_1_0 = r_3_1_0 ^ tmp_secMult_j_i
r_3_1_0 = verif(r_3_1_0, 85, 103)
tmp_secMult_i_j = y_0 * z_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 86, 103)
tmp_secMult_j_i = y_2 * z_0
tmp_secMult_j_i = verif(tmp_secMult_j_i, 87, 103)
r_3_2_0 = r_3_0_2 ^ tmp_secMult_i_j
r_3_2_0 = verif(r_3_2_0, 88, 103)
r_3_2_0 = r_3_2_0 ^ tmp_secMult_j_i
r_3_2_0 = verif(r_3_2_0, 89, 103)
tmp_secMult_i_j = y_1 * z_2
tmp_secMult_i_j = verif(tmp_secMult_i_j, 90, 103)
tmp_secMult_j_i = y_2 * z_1
tmp_secMult_j_i = verif(tmp_secMult_j_i, 91, 103)
r_3_2_1 = r_3_1_2 ^ tmp_secMult_i_j
r_3_2_1 = verif(r_3_2_1, 92, 103)
r_3_2_1 = r_3_2_1 ^ tmp_secMult_j_i
r_3_2_1 = verif(r_3_2_1, 93, 103)
y_0 = y_0 * z_0
y_0 = verif(y_0, 94, 103)
y_0 = y_0 ^ r_3_0_1
y_0 = verif(y_0, 95, 103)
y_0 = y_0 ^ r_3_0_2
y_0 = verif(y_0, 96, 103)
y_1 = y_1 * z_1
y_1 = verif(y_1, 97, 103)
y_1 = y_1 ^ r_3_1_0
y_1 = verif(y_1, 98, 103)
y_1 = y_1 ^ r_3_1_2
y_1 = verif(y_1, 99, 103)
y_2 = y_2 * z_2
y_2 = verif(y_2, 100, 103)
y_2 = y_2 ^ r_3_2_0
y_2 = verif(y_2, 101, 103)
y_2 = y_2 ^ r_3_2_1
y_2 = verif(y_2, 102, 103)
y_0 = y_0 ^ Ox63
y_0 = verif(y_0, 103, 103)
print_results()



"""

x_2 = x ^ x_0 ^ x_1
z_0 = x_0 * x_0
z_1 = x_1 * x_1
z_2 = x_2 * x_2
z_0 = z_0 ^ refresh_0_1
z_1 = z_1 ^ refresh_0_1
z_0 = z_0 ^ refresh_0_2
z_2 = z_2 ^ refresh_0_2
tmp_secMult_i_j = z_0 * x_1
tmp_secMult_j_i = z_1 * x_0
r_0_1_0 = r_0_0_1 ^ tmp_secMult_i_j
r_0_1_0 = r_0_1_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = z_0 * x_2
tmp_secMult_j_i = z_2 * x_0
r_0_2_0 = r_0_0_2 ^ tmp_secMult_i_j
r_0_2_0 = r_0_2_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = z_1 * x_2
tmp_secMult_j_i = z_2 * x_1
r_0_2_1 = r_0_1_2 ^ tmp_secMult_i_j
r_0_2_1 = r_0_2_1 ^ tmp_secMult_j_i
y_0 = z_0 * x_0
y_0 = y_0 ^ r_0_0_1
y_0 = y_0 ^ r_0_0_2
y_1 = z_1 * x_1
y_1 = y_1 ^ r_0_1_0
y_1 = y_1 ^ r_0_1_2
y_2 = z_2 * x_2
y_2 = y_2 ^ r_0_2_0
y_2 = y_2 ^ r_0_2_1
w_0 = y_0 * y_0 * y_0 * y_0
w_1 = y_1 * y_1 * y_1 * y_1
w_2 = y_2 * y_2 * y_2 * y_2
w_0 = w_0 ^ refresh_1_1
w_1 = w_1 ^ refresh_1_1
w_0 = w_0 ^ refresh_1_2
w_2 = w_2 ^ refresh_1_2
tmp_secMult_i_j = y_0 * w_1
tmp_secMult_j_i = y_1 * w_0
r_1_1_0 = r_1_0_1 ^ tmp_secMult_i_j
r_1_1_0 = r_1_1_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_0 * w_2
tmp_secMult_j_i = y_2 * w_0
r_1_2_0 = r_1_0_2 ^ tmp_secMult_i_j
r_1_2_0 = r_1_2_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_1 * w_2
tmp_secMult_j_i = y_2 * w_1
r_1_2_1 = r_1_1_2 ^ tmp_secMult_i_j
r_1_2_1 = r_1_2_1 ^ tmp_secMult_j_i
y_0 = y_0 * w_0
y_0 = y_0 ^ r_1_0_1
y_0 = y_0 ^ r_1_0_2
y_1 = y_1 * w_1
y_1 = y_1 ^ r_1_1_0
y_1 = y_1 ^ r_1_1_2
y_2 = y_2 * w_2
y_2 = y_2 ^ r_1_2_0
y_2 = y_2 ^ r_1_2_1
y_0 = y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0 * y_0
y_1 = y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1 * y_1
y_2 = y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2 * y_2
tmp_secMult_i_j = y_0 * w_1
tmp_secMult_j_i = y_1 * w_0
r_2_1_0 = r_2_0_1 ^ tmp_secMult_i_j
r_2_1_0 = r_2_1_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_0 * w_2
tmp_secMult_j_i = y_2 * w_0
r_2_2_0 = r_2_0_2 ^ tmp_secMult_i_j
r_2_2_0 = r_2_2_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_1 * w_2
tmp_secMult_j_i = y_2 * w_1
r_2_2_1 = r_2_1_2 ^ tmp_secMult_i_j
r_2_2_1 = r_2_2_1 ^ tmp_secMult_j_i
y_0 = y_0 * w_0
y_0 = y_0 ^ r_2_0_1
y_0 = y_0 ^ r_2_0_2
y_1 = y_1 * w_1
y_1 = y_1 ^ r_2_1_0
y_1 = y_1 ^ r_2_1_2
y_2 = y_2 * w_2
y_2 = y_2 ^ r_2_2_0
y_2 = y_2 ^ r_2_2_1
tmp_secMult_i_j = y_0 * z_1
tmp_secMult_j_i = y_1 * z_0
r_3_1_0 = r_3_0_1 ^ tmp_secMult_i_j
r_3_1_0 = r_3_1_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_0 * z_2
tmp_secMult_j_i = y_2 * z_0
r_3_2_0 = r_3_0_2 ^ tmp_secMult_i_j
r_3_2_0 = r_3_2_0 ^ tmp_secMult_j_i
tmp_secMult_i_j = y_1 * z_2
tmp_secMult_j_i = y_2 * z_1
r_3_2_1 = r_3_1_2 ^ tmp_secMult_i_j
r_3_2_1 = r_3_2_1 ^ tmp_secMult_j_i
y_0 = y_0 * z_0
y_0 = y_0 ^ r_3_0_1
y_0 = y_0 ^ r_3_0_2
y_1 = y_1 * z_1
y_1 = y_1 ^ r_3_1_0
y_1 = y_1 ^ r_3_1_2
y_2 = y_2 * z_2
y_2 = y_2 ^ r_3_2_0
y_2 = y_2 ^ r_3_2_1
y_0 = y_0 ^ Ox63

"""
